// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	////////////////////////////////////////////////////////////////////////////
	// Methods access from client side
	////////////////////////////////////////////////////////////////////////////
	// Establish the back pushing stream
	Watch(ctx context.Context, opts ...grpc.CallOption) (Gateway_WatchClient, error)
	////////////////////////////////////////////////////////////////////////////
	// Methods access from server side
	////////////////////////////////////////////////////////////////////////////
	// Send message to client
	Send(ctx context.Context, in *GatewaySendRequest, opts ...grpc.CallOption) (*GatewaySendResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) Watch(ctx context.Context, opts ...grpc.CallOption) (Gateway_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gateway_ServiceDesc.Streams[0], "/libra.v1.Gateway/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayWatchClient{stream}
	return x, nil
}

type Gateway_WatchClient interface {
	Send(*GatewayWatchRequest) error
	Recv() (*GatewayMessage, error)
	grpc.ClientStream
}

type gatewayWatchClient struct {
	grpc.ClientStream
}

func (x *gatewayWatchClient) Send(m *GatewayWatchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gatewayWatchClient) Recv() (*GatewayMessage, error) {
	m := new(GatewayMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gatewayClient) Send(ctx context.Context, in *GatewaySendRequest, opts ...grpc.CallOption) (*GatewaySendResponse, error) {
	out := new(GatewaySendResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Gateway/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	////////////////////////////////////////////////////////////////////////////
	// Methods access from client side
	////////////////////////////////////////////////////////////////////////////
	// Establish the back pushing stream
	Watch(Gateway_WatchServer) error
	////////////////////////////////////////////////////////////////////////////
	// Methods access from server side
	////////////////////////////////////////////////////////////////////////////
	// Send message to client
	Send(context.Context, *GatewaySendRequest) (*GatewaySendResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) Watch(Gateway_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedGatewayServer) Send(context.Context, *GatewaySendRequest) (*GatewaySendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GatewayServer).Watch(&gatewayWatchServer{stream})
}

type Gateway_WatchServer interface {
	Send(*GatewayMessage) error
	Recv() (*GatewayWatchRequest, error)
	grpc.ServerStream
}

type gatewayWatchServer struct {
	grpc.ServerStream
}

func (x *gatewayWatchServer) Send(m *GatewayMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gatewayWatchServer) Recv() (*GatewayWatchRequest, error) {
	m := new(GatewayWatchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Gateway_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewaySendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Gateway/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Send(ctx, req.(*GatewaySendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "libra.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Gateway_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Gateway_Watch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "libra/v1/gateway.proto",
}
