// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GiftClient is the client API for Gift service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GiftClient interface {
	// 创建礼包
	Create(ctx context.Context, in *GiftCreateRequest, opts ...grpc.CallOption) (*GiftCreateResponse, error)
	// 撤销礼包
	Revoke(ctx context.Context, in *GiftRevokeRequest, opts ...grpc.CallOption) (*GiftRevokeResponse, error)
	// 更新礼包
	Update(ctx context.Context, in *GiftUpdateRequest, opts ...grpc.CallOption) (*GiftUpdateResponse, error)
	// 校验礼包码
	Verify(ctx context.Context, in *GiftVerifyRequest, opts ...grpc.CallOption) (*GiftVerifyResponse, error)
	// 兑换礼包码
	Redeem(ctx context.Context, in *GiftRedeemRequest, opts ...grpc.CallOption) (*GiftRedeemResponse, error)
}

type giftClient struct {
	cc grpc.ClientConnInterface
}

func NewGiftClient(cc grpc.ClientConnInterface) GiftClient {
	return &giftClient{cc}
}

func (c *giftClient) Create(ctx context.Context, in *GiftCreateRequest, opts ...grpc.CallOption) (*GiftCreateResponse, error) {
	out := new(GiftCreateResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Gift/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giftClient) Revoke(ctx context.Context, in *GiftRevokeRequest, opts ...grpc.CallOption) (*GiftRevokeResponse, error) {
	out := new(GiftRevokeResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Gift/Revoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giftClient) Update(ctx context.Context, in *GiftUpdateRequest, opts ...grpc.CallOption) (*GiftUpdateResponse, error) {
	out := new(GiftUpdateResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Gift/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giftClient) Verify(ctx context.Context, in *GiftVerifyRequest, opts ...grpc.CallOption) (*GiftVerifyResponse, error) {
	out := new(GiftVerifyResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Gift/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giftClient) Redeem(ctx context.Context, in *GiftRedeemRequest, opts ...grpc.CallOption) (*GiftRedeemResponse, error) {
	out := new(GiftRedeemResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Gift/Redeem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GiftServer is the server API for Gift service.
// All implementations must embed UnimplementedGiftServer
// for forward compatibility
type GiftServer interface {
	// 创建礼包
	Create(context.Context, *GiftCreateRequest) (*GiftCreateResponse, error)
	// 撤销礼包
	Revoke(context.Context, *GiftRevokeRequest) (*GiftRevokeResponse, error)
	// 更新礼包
	Update(context.Context, *GiftUpdateRequest) (*GiftUpdateResponse, error)
	// 校验礼包码
	Verify(context.Context, *GiftVerifyRequest) (*GiftVerifyResponse, error)
	// 兑换礼包码
	Redeem(context.Context, *GiftRedeemRequest) (*GiftRedeemResponse, error)
	mustEmbedUnimplementedGiftServer()
}

// UnimplementedGiftServer must be embedded to have forward compatible implementations.
type UnimplementedGiftServer struct {
}

func (UnimplementedGiftServer) Create(context.Context, *GiftCreateRequest) (*GiftCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGiftServer) Revoke(context.Context, *GiftRevokeRequest) (*GiftRevokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revoke not implemented")
}
func (UnimplementedGiftServer) Update(context.Context, *GiftUpdateRequest) (*GiftUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGiftServer) Verify(context.Context, *GiftVerifyRequest) (*GiftVerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedGiftServer) Redeem(context.Context, *GiftRedeemRequest) (*GiftRedeemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Redeem not implemented")
}
func (UnimplementedGiftServer) mustEmbedUnimplementedGiftServer() {}

// UnsafeGiftServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GiftServer will
// result in compilation errors.
type UnsafeGiftServer interface {
	mustEmbedUnimplementedGiftServer()
}

func RegisterGiftServer(s grpc.ServiceRegistrar, srv GiftServer) {
	s.RegisterService(&Gift_ServiceDesc, srv)
}

func _Gift_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiftCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiftServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Gift/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiftServer).Create(ctx, req.(*GiftCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gift_Revoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiftRevokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiftServer).Revoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Gift/Revoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiftServer).Revoke(ctx, req.(*GiftRevokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gift_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiftUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiftServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Gift/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiftServer).Update(ctx, req.(*GiftUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gift_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiftVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiftServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Gift/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiftServer).Verify(ctx, req.(*GiftVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gift_Redeem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiftRedeemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiftServer).Redeem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Gift/Redeem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiftServer).Redeem(ctx, req.(*GiftRedeemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gift_ServiceDesc is the grpc.ServiceDesc for Gift service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gift_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "libra.v1.Gift",
	HandlerType: (*GiftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Gift_Create_Handler,
		},
		{
			MethodName: "Revoke",
			Handler:    _Gift_Revoke_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Gift_Update_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _Gift_Verify_Handler,
		},
		{
			MethodName: "Redeem",
			Handler:    _Gift_Redeem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "libra/v1/gift.proto",
}
