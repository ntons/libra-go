// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserAdminClient is the client API for UserAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAdminClient interface {
	SetMetadata(ctx context.Context, in *UserAdminSetMetadataRequest, opts ...grpc.CallOption) (*UserAdminSetMetadataResponse, error)
	GetMetadata(ctx context.Context, in *UserAdminGetMetadataRequest, opts ...grpc.CallOption) (*UserAdminGetMetadataResponse, error)
	// 查询用户
	Get(ctx context.Context, in *UserAdminGetRequest, opts ...grpc.CallOption) (*UserAdminGetResponse, error)
	// 封禁用户
	Ban(ctx context.Context, in *UserAdminBanRequest, opts ...grpc.CallOption) (*UserAdminBanResponse, error)
	// 账号绑定
	BindAcctId(ctx context.Context, in *UserAdminBindAcctIdRequest, opts ...grpc.CallOption) (*UserAdminBindAcctIdResponse, error)
}

type userAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAdminClient(cc grpc.ClientConnInterface) UserAdminClient {
	return &userAdminClient{cc}
}

func (c *userAdminClient) SetMetadata(ctx context.Context, in *UserAdminSetMetadataRequest, opts ...grpc.CallOption) (*UserAdminSetMetadataResponse, error) {
	out := new(UserAdminSetMetadataResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.UserAdmin/SetMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAdminClient) GetMetadata(ctx context.Context, in *UserAdminGetMetadataRequest, opts ...grpc.CallOption) (*UserAdminGetMetadataResponse, error) {
	out := new(UserAdminGetMetadataResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.UserAdmin/GetMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAdminClient) Get(ctx context.Context, in *UserAdminGetRequest, opts ...grpc.CallOption) (*UserAdminGetResponse, error) {
	out := new(UserAdminGetResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.UserAdmin/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAdminClient) Ban(ctx context.Context, in *UserAdminBanRequest, opts ...grpc.CallOption) (*UserAdminBanResponse, error) {
	out := new(UserAdminBanResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.UserAdmin/Ban", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAdminClient) BindAcctId(ctx context.Context, in *UserAdminBindAcctIdRequest, opts ...grpc.CallOption) (*UserAdminBindAcctIdResponse, error) {
	out := new(UserAdminBindAcctIdResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.UserAdmin/BindAcctId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAdminServer is the server API for UserAdmin service.
// All implementations must embed UnimplementedUserAdminServer
// for forward compatibility
type UserAdminServer interface {
	SetMetadata(context.Context, *UserAdminSetMetadataRequest) (*UserAdminSetMetadataResponse, error)
	GetMetadata(context.Context, *UserAdminGetMetadataRequest) (*UserAdminGetMetadataResponse, error)
	// 查询用户
	Get(context.Context, *UserAdminGetRequest) (*UserAdminGetResponse, error)
	// 封禁用户
	Ban(context.Context, *UserAdminBanRequest) (*UserAdminBanResponse, error)
	// 账号绑定
	BindAcctId(context.Context, *UserAdminBindAcctIdRequest) (*UserAdminBindAcctIdResponse, error)
	mustEmbedUnimplementedUserAdminServer()
}

// UnimplementedUserAdminServer must be embedded to have forward compatible implementations.
type UnimplementedUserAdminServer struct {
}

func (UnimplementedUserAdminServer) SetMetadata(context.Context, *UserAdminSetMetadataRequest) (*UserAdminSetMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMetadata not implemented")
}
func (UnimplementedUserAdminServer) GetMetadata(context.Context, *UserAdminGetMetadataRequest) (*UserAdminGetMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}
func (UnimplementedUserAdminServer) Get(context.Context, *UserAdminGetRequest) (*UserAdminGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUserAdminServer) Ban(context.Context, *UserAdminBanRequest) (*UserAdminBanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ban not implemented")
}
func (UnimplementedUserAdminServer) BindAcctId(context.Context, *UserAdminBindAcctIdRequest) (*UserAdminBindAcctIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindAcctId not implemented")
}
func (UnimplementedUserAdminServer) mustEmbedUnimplementedUserAdminServer() {}

// UnsafeUserAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAdminServer will
// result in compilation errors.
type UnsafeUserAdminServer interface {
	mustEmbedUnimplementedUserAdminServer()
}

func RegisterUserAdminServer(s grpc.ServiceRegistrar, srv UserAdminServer) {
	s.RegisterService(&UserAdmin_ServiceDesc, srv)
}

func _UserAdmin_SetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAdminSetMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAdminServer).SetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.UserAdmin/SetMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAdminServer).SetMetadata(ctx, req.(*UserAdminSetMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAdmin_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAdminGetMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAdminServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.UserAdmin/GetMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAdminServer).GetMetadata(ctx, req.(*UserAdminGetMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAdmin_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAdminGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAdminServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.UserAdmin/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAdminServer).Get(ctx, req.(*UserAdminGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAdmin_Ban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAdminBanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAdminServer).Ban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.UserAdmin/Ban",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAdminServer).Ban(ctx, req.(*UserAdminBanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAdmin_BindAcctId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAdminBindAcctIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAdminServer).BindAcctId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.UserAdmin/BindAcctId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAdminServer).BindAcctId(ctx, req.(*UserAdminBindAcctIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAdmin_ServiceDesc is the grpc.ServiceDesc for UserAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "libra.v1.UserAdmin",
	HandlerType: (*UserAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetMetadata",
			Handler:    _UserAdmin_SetMetadata_Handler,
		},
		{
			MethodName: "GetMetadata",
			Handler:    _UserAdmin_GetMetadata_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _UserAdmin_Get_Handler,
		},
		{
			MethodName: "Ban",
			Handler:    _UserAdmin_Ban_Handler,
		},
		{
			MethodName: "BindAcctId",
			Handler:    _UserAdmin_BindAcctId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "libra/v1/useradmin.proto",
}
