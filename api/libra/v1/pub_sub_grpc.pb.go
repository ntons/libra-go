// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PubSubServiceClient is the client API for PubSubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PubSubServiceClient interface {
	// 发送
	// 不提供批量发送，因为无法保证原子性
	Send(ctx context.Context, in *PubSub_SendRequest, opts ...grpc.CallOption) (*PubSub_SendResponse, error)
	// 读取
	// 提供起始消息ID，监听并收取该ID及以后的消息
	Read(ctx context.Context, in *PubSub_ReadRequest, opts ...grpc.CallOption) (PubSubService_ReadClient, error)
	// 消费
	// 提供消费组，监听并消费主题消息，消息处理后需要响应ACK
	// 保证同一个消费组中，主题中的消息都能且只能被消费一次
	Consume(ctx context.Context, opts ...grpc.CallOption) (PubSubService_ConsumeClient, error)
}

type pubSubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPubSubServiceClient(cc grpc.ClientConnInterface) PubSubServiceClient {
	return &pubSubServiceClient{cc}
}

func (c *pubSubServiceClient) Send(ctx context.Context, in *PubSub_SendRequest, opts ...grpc.CallOption) (*PubSub_SendResponse, error) {
	out := new(PubSub_SendResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.PubSubService/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubSubServiceClient) Read(ctx context.Context, in *PubSub_ReadRequest, opts ...grpc.CallOption) (PubSubService_ReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &PubSubService_ServiceDesc.Streams[0], "/libra.v1.PubSubService/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &pubSubServiceReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PubSubService_ReadClient interface {
	Recv() (*PubSub_ReadResponse, error)
	grpc.ClientStream
}

type pubSubServiceReadClient struct {
	grpc.ClientStream
}

func (x *pubSubServiceReadClient) Recv() (*PubSub_ReadResponse, error) {
	m := new(PubSub_ReadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pubSubServiceClient) Consume(ctx context.Context, opts ...grpc.CallOption) (PubSubService_ConsumeClient, error) {
	stream, err := c.cc.NewStream(ctx, &PubSubService_ServiceDesc.Streams[1], "/libra.v1.PubSubService/Consume", opts...)
	if err != nil {
		return nil, err
	}
	x := &pubSubServiceConsumeClient{stream}
	return x, nil
}

type PubSubService_ConsumeClient interface {
	Send(*PubSub_ConsumeRequest) error
	Recv() (*PubSub_ConsumeResponse, error)
	grpc.ClientStream
}

type pubSubServiceConsumeClient struct {
	grpc.ClientStream
}

func (x *pubSubServiceConsumeClient) Send(m *PubSub_ConsumeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pubSubServiceConsumeClient) Recv() (*PubSub_ConsumeResponse, error) {
	m := new(PubSub_ConsumeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PubSubServiceServer is the server API for PubSubService service.
// All implementations must embed UnimplementedPubSubServiceServer
// for forward compatibility
type PubSubServiceServer interface {
	// 发送
	// 不提供批量发送，因为无法保证原子性
	Send(context.Context, *PubSub_SendRequest) (*PubSub_SendResponse, error)
	// 读取
	// 提供起始消息ID，监听并收取该ID及以后的消息
	Read(*PubSub_ReadRequest, PubSubService_ReadServer) error
	// 消费
	// 提供消费组，监听并消费主题消息，消息处理后需要响应ACK
	// 保证同一个消费组中，主题中的消息都能且只能被消费一次
	Consume(PubSubService_ConsumeServer) error
	mustEmbedUnimplementedPubSubServiceServer()
}

// UnimplementedPubSubServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPubSubServiceServer struct {
}

func (UnimplementedPubSubServiceServer) Send(context.Context, *PubSub_SendRequest) (*PubSub_SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedPubSubServiceServer) Read(*PubSub_ReadRequest, PubSubService_ReadServer) error {
	return status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedPubSubServiceServer) Consume(PubSubService_ConsumeServer) error {
	return status.Errorf(codes.Unimplemented, "method Consume not implemented")
}
func (UnimplementedPubSubServiceServer) mustEmbedUnimplementedPubSubServiceServer() {}

// UnsafePubSubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PubSubServiceServer will
// result in compilation errors.
type UnsafePubSubServiceServer interface {
	mustEmbedUnimplementedPubSubServiceServer()
}

func RegisterPubSubServiceServer(s grpc.ServiceRegistrar, srv PubSubServiceServer) {
	s.RegisterService(&PubSubService_ServiceDesc, srv)
}

func _PubSubService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubSub_SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubSubServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.PubSubService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubSubServiceServer).Send(ctx, req.(*PubSub_SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubSubService_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PubSub_ReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PubSubServiceServer).Read(m, &pubSubServiceReadServer{stream})
}

type PubSubService_ReadServer interface {
	Send(*PubSub_ReadResponse) error
	grpc.ServerStream
}

type pubSubServiceReadServer struct {
	grpc.ServerStream
}

func (x *pubSubServiceReadServer) Send(m *PubSub_ReadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PubSubService_Consume_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PubSubServiceServer).Consume(&pubSubServiceConsumeServer{stream})
}

type PubSubService_ConsumeServer interface {
	Send(*PubSub_ConsumeResponse) error
	Recv() (*PubSub_ConsumeRequest, error)
	grpc.ServerStream
}

type pubSubServiceConsumeServer struct {
	grpc.ServerStream
}

func (x *pubSubServiceConsumeServer) Send(m *PubSub_ConsumeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pubSubServiceConsumeServer) Recv() (*PubSub_ConsumeRequest, error) {
	m := new(PubSub_ConsumeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PubSubService_ServiceDesc is the grpc.ServiceDesc for PubSubService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PubSubService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "libra.v1.PubSubService",
	HandlerType: (*PubSubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _PubSubService_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Read",
			Handler:       _PubSubService_Read_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Consume",
			Handler:       _PubSubService_Consume_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "libra/v1/pub_sub.proto",
}
