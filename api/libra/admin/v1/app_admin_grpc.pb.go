// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppAdminClient is the client API for AppAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppAdminClient interface {
	// 获取应用列表
	List(ctx context.Context, in *AppAdminListRequest, opts ...grpc.CallOption) (*AppAdminListResponse, error)
	// 监视应用列表
	Watch(ctx context.Context, in *AppAdminListRequest, opts ...grpc.CallOption) (AppAdmin_WatchClient, error)
}

type appAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewAppAdminClient(cc grpc.ClientConnInterface) AppAdminClient {
	return &appAdminClient{cc}
}

func (c *appAdminClient) List(ctx context.Context, in *AppAdminListRequest, opts ...grpc.CallOption) (*AppAdminListResponse, error) {
	out := new(AppAdminListResponse)
	err := c.cc.Invoke(ctx, "/libra.admin.v1.AppAdmin/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAdminClient) Watch(ctx context.Context, in *AppAdminListRequest, opts ...grpc.CallOption) (AppAdmin_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &AppAdmin_ServiceDesc.Streams[0], "/libra.admin.v1.AppAdmin/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &appAdminWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AppAdmin_WatchClient interface {
	Recv() (*AppAdminListResponse, error)
	grpc.ClientStream
}

type appAdminWatchClient struct {
	grpc.ClientStream
}

func (x *appAdminWatchClient) Recv() (*AppAdminListResponse, error) {
	m := new(AppAdminListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AppAdminServer is the server API for AppAdmin service.
// All implementations must embed UnimplementedAppAdminServer
// for forward compatibility
type AppAdminServer interface {
	// 获取应用列表
	List(context.Context, *AppAdminListRequest) (*AppAdminListResponse, error)
	// 监视应用列表
	Watch(*AppAdminListRequest, AppAdmin_WatchServer) error
	mustEmbedUnimplementedAppAdminServer()
}

// UnimplementedAppAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAppAdminServer struct {
}

func (UnimplementedAppAdminServer) List(context.Context, *AppAdminListRequest) (*AppAdminListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAppAdminServer) Watch(*AppAdminListRequest, AppAdmin_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedAppAdminServer) mustEmbedUnimplementedAppAdminServer() {}

// UnsafeAppAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppAdminServer will
// result in compilation errors.
type UnsafeAppAdminServer interface {
	mustEmbedUnimplementedAppAdminServer()
}

func RegisterAppAdminServer(s grpc.ServiceRegistrar, srv AppAdminServer) {
	s.RegisterService(&AppAdmin_ServiceDesc, srv)
}

func _AppAdmin_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppAdminListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAdminServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.admin.v1.AppAdmin/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAdminServer).List(ctx, req.(*AppAdminListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppAdmin_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AppAdminListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppAdminServer).Watch(m, &appAdminWatchServer{stream})
}

type AppAdmin_WatchServer interface {
	Send(*AppAdminListResponse) error
	grpc.ServerStream
}

type appAdminWatchServer struct {
	grpc.ServerStream
}

func (x *appAdminWatchServer) Send(m *AppAdminListResponse) error {
	return x.ServerStream.SendMsg(m)
}

// AppAdmin_ServiceDesc is the grpc.ServiceDesc for AppAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "libra.admin.v1.AppAdmin",
	HandlerType: (*AppAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _AppAdmin_List_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _AppAdmin_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "libra/admin/v1/app_admin.proto",
}
