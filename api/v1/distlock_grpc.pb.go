// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DistlockClient is the client API for Distlock service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistlockClient interface {
	Lock(ctx context.Context, in *DistlockLockRequest, opts ...grpc.CallOption) (*DistlockLockResponse, error)
	Unlock(ctx context.Context, in *DistlockUnlockRequest, opts ...grpc.CallOption) (*DistlockUnlockResponse, error)
}

type distlockClient struct {
	cc grpc.ClientConnInterface
}

func NewDistlockClient(cc grpc.ClientConnInterface) DistlockClient {
	return &distlockClient{cc}
}

func (c *distlockClient) Lock(ctx context.Context, in *DistlockLockRequest, opts ...grpc.CallOption) (*DistlockLockResponse, error) {
	out := new(DistlockLockResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Distlock/Lock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distlockClient) Unlock(ctx context.Context, in *DistlockUnlockRequest, opts ...grpc.CallOption) (*DistlockUnlockResponse, error) {
	out := new(DistlockUnlockResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Distlock/Unlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistlockServer is the server API for Distlock service.
// All implementations must embed UnimplementedDistlockServer
// for forward compatibility
type DistlockServer interface {
	Lock(context.Context, *DistlockLockRequest) (*DistlockLockResponse, error)
	Unlock(context.Context, *DistlockUnlockRequest) (*DistlockUnlockResponse, error)
	mustEmbedUnimplementedDistlockServer()
}

// UnimplementedDistlockServer must be embedded to have forward compatible implementations.
type UnimplementedDistlockServer struct {
}

func (UnimplementedDistlockServer) Lock(context.Context, *DistlockLockRequest) (*DistlockLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (UnimplementedDistlockServer) Unlock(context.Context, *DistlockUnlockRequest) (*DistlockUnlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlock not implemented")
}
func (UnimplementedDistlockServer) mustEmbedUnimplementedDistlockServer() {}

// UnsafeDistlockServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistlockServer will
// result in compilation errors.
type UnsafeDistlockServer interface {
	mustEmbedUnimplementedDistlockServer()
}

func RegisterDistlockServer(s grpc.ServiceRegistrar, srv DistlockServer) {
	s.RegisterService(&Distlock_ServiceDesc, srv)
}

func _Distlock_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistlockLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistlockServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Distlock/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistlockServer).Lock(ctx, req.(*DistlockLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Distlock_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistlockUnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistlockServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Distlock/Unlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistlockServer).Unlock(ctx, req.(*DistlockUnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Distlock_ServiceDesc is the grpc.ServiceDesc for Distlock service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Distlock_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "libra.v1.Distlock",
	HandlerType: (*DistlockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Lock",
			Handler:    _Distlock_Lock_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _Distlock_Unlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/distlock.proto",
}
