// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	any "github.com/golang/protobuf/ptypes/any"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	// Establish the push stream
	// Access提供客户端接入服务，签入之后可以获取S->C通信管道
	// 该接口需要校验客户端合法性
	Access(ctx context.Context, in *GatewayAccessRequest, opts ...grpc.CallOption) (Gateway_AccessClient, error)
	// Push message to client
	Push(ctx context.Context, in *GatewayPushRequest, opts ...grpc.CallOption) (*GatewayPushResponse, error)
	// Subscribe a broadcast channel
	Subscribe(ctx context.Context, in *GatewaySubscribeRequest, opts ...grpc.CallOption) (*GatewaySubscribeResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) Access(ctx context.Context, in *GatewayAccessRequest, opts ...grpc.CallOption) (Gateway_AccessClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Gateway_serviceDesc.Streams[0], "/libra.v1.Gateway/Access", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayAccessClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gateway_AccessClient interface {
	Recv() (*any.Any, error)
	grpc.ClientStream
}

type gatewayAccessClient struct {
	grpc.ClientStream
}

func (x *gatewayAccessClient) Recv() (*any.Any, error) {
	m := new(any.Any)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gatewayClient) Push(ctx context.Context, in *GatewayPushRequest, opts ...grpc.CallOption) (*GatewayPushResponse, error) {
	out := new(GatewayPushResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Gateway/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Subscribe(ctx context.Context, in *GatewaySubscribeRequest, opts ...grpc.CallOption) (*GatewaySubscribeResponse, error) {
	out := new(GatewaySubscribeResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Gateway/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	// Establish the push stream
	// Access提供客户端接入服务，签入之后可以获取S->C通信管道
	// 该接口需要校验客户端合法性
	Access(*GatewayAccessRequest, Gateway_AccessServer) error
	// Push message to client
	Push(context.Context, *GatewayPushRequest) (*GatewayPushResponse, error)
	// Subscribe a broadcast channel
	Subscribe(context.Context, *GatewaySubscribeRequest) (*GatewaySubscribeResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (*UnimplementedGatewayServer) Access(*GatewayAccessRequest, Gateway_AccessServer) error {
	return status.Errorf(codes.Unimplemented, "method Access not implemented")
}
func (*UnimplementedGatewayServer) Push(context.Context, *GatewayPushRequest) (*GatewayPushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (*UnimplementedGatewayServer) Subscribe(context.Context, *GatewaySubscribeRequest) (*GatewaySubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

func RegisterGatewayServer(s *grpc.Server, srv GatewayServer) {
	s.RegisterService(&_Gateway_serviceDesc, srv)
}

func _Gateway_Access_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GatewayAccessRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayServer).Access(m, &gatewayAccessServer{stream})
}

type Gateway_AccessServer interface {
	Send(*any.Any) error
	grpc.ServerStream
}

type gatewayAccessServer struct {
	grpc.ServerStream
}

func (x *gatewayAccessServer) Send(m *any.Any) error {
	return x.ServerStream.SendMsg(m)
}

func _Gateway_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Gateway/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Push(ctx, req.(*GatewayPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewaySubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Gateway/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Subscribe(ctx, req.(*GatewaySubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "libra.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _Gateway_Push_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _Gateway_Subscribe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Access",
			Handler:       _Gateway_Access_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/gateway.proto",
}
