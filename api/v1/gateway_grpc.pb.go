// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	any "github.com/golang/protobuf/ptypes/any"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	////////////////////////////////////////////////////////////////////////////
	// Methods access from client side
	////////////////////////////////////////////////////////////////////////////
	// Establish the back pushing stream
	Connect(ctx context.Context, in *GatewayConnectRequest, opts ...grpc.CallOption) (Gateway_ConnectClient, error)
	////////////////////////////////////////////////////////////////////////////
	// Methods access from server side
	////////////////////////////////////////////////////////////////////////////
	// Send message to client
	Send(ctx context.Context, in *GatewaySendRequest, opts ...grpc.CallOption) (*GatewaySendResponse, error)
	// Let a certain client to subscribe broadcast channels
	Subscribe(ctx context.Context, in *GatewaySubscribeRequest, opts ...grpc.CallOption) (*GatewaySubscribeResponse, error)
	// let a certain client to unsubscribe broadcast channels
	Unsubscribe(ctx context.Context, in *GatewayUnsubscribeRequest, opts ...grpc.CallOption) (*GatewayUnsubscribeResponse, error)
	// Broadcast to a channel
	Broadcast(ctx context.Context, in *GatewayBroadcastRequest, opts ...grpc.CallOption) (*GatewayBroadcastResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) Connect(ctx context.Context, in *GatewayConnectRequest, opts ...grpc.CallOption) (Gateway_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Gateway_serviceDesc.Streams[0], "/libra.v1.Gateway/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gateway_ConnectClient interface {
	Recv() (*any.Any, error)
	grpc.ClientStream
}

type gatewayConnectClient struct {
	grpc.ClientStream
}

func (x *gatewayConnectClient) Recv() (*any.Any, error) {
	m := new(any.Any)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gatewayClient) Send(ctx context.Context, in *GatewaySendRequest, opts ...grpc.CallOption) (*GatewaySendResponse, error) {
	out := new(GatewaySendResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Gateway/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Subscribe(ctx context.Context, in *GatewaySubscribeRequest, opts ...grpc.CallOption) (*GatewaySubscribeResponse, error) {
	out := new(GatewaySubscribeResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Gateway/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Unsubscribe(ctx context.Context, in *GatewayUnsubscribeRequest, opts ...grpc.CallOption) (*GatewayUnsubscribeResponse, error) {
	out := new(GatewayUnsubscribeResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Gateway/Unsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Broadcast(ctx context.Context, in *GatewayBroadcastRequest, opts ...grpc.CallOption) (*GatewayBroadcastResponse, error) {
	out := new(GatewayBroadcastResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Gateway/Broadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	////////////////////////////////////////////////////////////////////////////
	// Methods access from client side
	////////////////////////////////////////////////////////////////////////////
	// Establish the back pushing stream
	Connect(*GatewayConnectRequest, Gateway_ConnectServer) error
	////////////////////////////////////////////////////////////////////////////
	// Methods access from server side
	////////////////////////////////////////////////////////////////////////////
	// Send message to client
	Send(context.Context, *GatewaySendRequest) (*GatewaySendResponse, error)
	// Let a certain client to subscribe broadcast channels
	Subscribe(context.Context, *GatewaySubscribeRequest) (*GatewaySubscribeResponse, error)
	// let a certain client to unsubscribe broadcast channels
	Unsubscribe(context.Context, *GatewayUnsubscribeRequest) (*GatewayUnsubscribeResponse, error)
	// Broadcast to a channel
	Broadcast(context.Context, *GatewayBroadcastRequest) (*GatewayBroadcastResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (*UnimplementedGatewayServer) Connect(*GatewayConnectRequest, Gateway_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (*UnimplementedGatewayServer) Send(context.Context, *GatewaySendRequest) (*GatewaySendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (*UnimplementedGatewayServer) Subscribe(context.Context, *GatewaySubscribeRequest) (*GatewaySubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedGatewayServer) Unsubscribe(context.Context, *GatewayUnsubscribeRequest) (*GatewayUnsubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (*UnimplementedGatewayServer) Broadcast(context.Context, *GatewayBroadcastRequest) (*GatewayBroadcastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (*UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

func RegisterGatewayServer(s *grpc.Server, srv GatewayServer) {
	s.RegisterService(&_Gateway_serviceDesc, srv)
}

func _Gateway_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GatewayConnectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayServer).Connect(m, &gatewayConnectServer{stream})
}

type Gateway_ConnectServer interface {
	Send(*any.Any) error
	grpc.ServerStream
}

type gatewayConnectServer struct {
	grpc.ServerStream
}

func (x *gatewayConnectServer) Send(m *any.Any) error {
	return x.ServerStream.SendMsg(m)
}

func _Gateway_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewaySendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Gateway/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Send(ctx, req.(*GatewaySendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewaySubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Gateway/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Subscribe(ctx, req.(*GatewaySubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayUnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Gateway/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Unsubscribe(ctx, req.(*GatewayUnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayBroadcastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Gateway/Broadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Broadcast(ctx, req.(*GatewayBroadcastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "libra.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Gateway_Send_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _Gateway_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _Gateway_Unsubscribe_Handler,
		},
		{
			MethodName: "Broadcast",
			Handler:    _Gateway_Broadcast_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Gateway_Connect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/gateway.proto",
}
