// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DatabaseClient is the client API for Database service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseClient interface {
	RegisterSchema(ctx context.Context, in *RegisterSchemaRequest, opts ...grpc.CallOption) (*RegisterSchemaResponse, error)
	// lock/unlock archive mutex
	Lock(ctx context.Context, in *GetArchiveRequest, opts ...grpc.CallOption) (*GetArchiveResponse, error)
	Unlock(ctx context.Context, in *SetArchiveRequest, opts ...grpc.CallOption) (*SetArchiveResponse, error)
	// get/set whole archive
	GetArchive(ctx context.Context, in *GetArchiveRequest, opts ...grpc.CallOption) (*GetArchiveResponse, error)
	SetArchive(ctx context.Context, in *SetArchiveRequest, opts ...grpc.CallOption) (*SetArchiveResponse, error)
	// get/set archive model
	GetModel(ctx context.Context, in *GetArchiveRequest, opts ...grpc.CallOption) (*GetArchiveResponse, error)
	SetModel(ctx context.Context, in *SetArchiveRequest, opts ...grpc.CallOption) (*SetArchiveResponse, error)
	// get/set archive metadata
	GetMetadata(ctx context.Context, in *GetArchiveRequest, opts ...grpc.CallOption) (*GetArchiveResponse, error)
	SetMetadata(ctx context.Context, in *SetArchiveRequest, opts ...grpc.CallOption) (*SetArchiveResponse, error)
}

type databaseClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseClient(cc grpc.ClientConnInterface) DatabaseClient {
	return &databaseClient{cc}
}

func (c *databaseClient) RegisterSchema(ctx context.Context, in *RegisterSchemaRequest, opts ...grpc.CallOption) (*RegisterSchemaResponse, error) {
	out := new(RegisterSchemaResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Database/RegisterSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) Lock(ctx context.Context, in *GetArchiveRequest, opts ...grpc.CallOption) (*GetArchiveResponse, error) {
	out := new(GetArchiveResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Database/Lock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) Unlock(ctx context.Context, in *SetArchiveRequest, opts ...grpc.CallOption) (*SetArchiveResponse, error) {
	out := new(SetArchiveResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Database/Unlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) GetArchive(ctx context.Context, in *GetArchiveRequest, opts ...grpc.CallOption) (*GetArchiveResponse, error) {
	out := new(GetArchiveResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Database/GetArchive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) SetArchive(ctx context.Context, in *SetArchiveRequest, opts ...grpc.CallOption) (*SetArchiveResponse, error) {
	out := new(SetArchiveResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Database/SetArchive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) GetModel(ctx context.Context, in *GetArchiveRequest, opts ...grpc.CallOption) (*GetArchiveResponse, error) {
	out := new(GetArchiveResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Database/GetModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) SetModel(ctx context.Context, in *SetArchiveRequest, opts ...grpc.CallOption) (*SetArchiveResponse, error) {
	out := new(SetArchiveResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Database/SetModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) GetMetadata(ctx context.Context, in *GetArchiveRequest, opts ...grpc.CallOption) (*GetArchiveResponse, error) {
	out := new(GetArchiveResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Database/GetMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) SetMetadata(ctx context.Context, in *SetArchiveRequest, opts ...grpc.CallOption) (*SetArchiveResponse, error) {
	out := new(SetArchiveResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Database/SetMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseServer is the server API for Database service.
// All implementations must embed UnimplementedDatabaseServer
// for forward compatibility
type DatabaseServer interface {
	RegisterSchema(context.Context, *RegisterSchemaRequest) (*RegisterSchemaResponse, error)
	// lock/unlock archive mutex
	Lock(context.Context, *GetArchiveRequest) (*GetArchiveResponse, error)
	Unlock(context.Context, *SetArchiveRequest) (*SetArchiveResponse, error)
	// get/set whole archive
	GetArchive(context.Context, *GetArchiveRequest) (*GetArchiveResponse, error)
	SetArchive(context.Context, *SetArchiveRequest) (*SetArchiveResponse, error)
	// get/set archive model
	GetModel(context.Context, *GetArchiveRequest) (*GetArchiveResponse, error)
	SetModel(context.Context, *SetArchiveRequest) (*SetArchiveResponse, error)
	// get/set archive metadata
	GetMetadata(context.Context, *GetArchiveRequest) (*GetArchiveResponse, error)
	SetMetadata(context.Context, *SetArchiveRequest) (*SetArchiveResponse, error)
	mustEmbedUnimplementedDatabaseServer()
}

// UnimplementedDatabaseServer must be embedded to have forward compatible implementations.
type UnimplementedDatabaseServer struct {
}

func (*UnimplementedDatabaseServer) RegisterSchema(context.Context, *RegisterSchemaRequest) (*RegisterSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSchema not implemented")
}
func (*UnimplementedDatabaseServer) Lock(context.Context, *GetArchiveRequest) (*GetArchiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (*UnimplementedDatabaseServer) Unlock(context.Context, *SetArchiveRequest) (*SetArchiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlock not implemented")
}
func (*UnimplementedDatabaseServer) GetArchive(context.Context, *GetArchiveRequest) (*GetArchiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArchive not implemented")
}
func (*UnimplementedDatabaseServer) SetArchive(context.Context, *SetArchiveRequest) (*SetArchiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetArchive not implemented")
}
func (*UnimplementedDatabaseServer) GetModel(context.Context, *GetArchiveRequest) (*GetArchiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModel not implemented")
}
func (*UnimplementedDatabaseServer) SetModel(context.Context, *SetArchiveRequest) (*SetArchiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetModel not implemented")
}
func (*UnimplementedDatabaseServer) GetMetadata(context.Context, *GetArchiveRequest) (*GetArchiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}
func (*UnimplementedDatabaseServer) SetMetadata(context.Context, *SetArchiveRequest) (*SetArchiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMetadata not implemented")
}
func (*UnimplementedDatabaseServer) mustEmbedUnimplementedDatabaseServer() {}

func RegisterDatabaseServer(s *grpc.Server, srv DatabaseServer) {
	s.RegisterService(&_Database_serviceDesc, srv)
}

func _Database_RegisterSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).RegisterSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Database/RegisterSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).RegisterSchema(ctx, req.(*RegisterSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArchiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Database/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).Lock(ctx, req.(*GetArchiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetArchiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Database/Unlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).Unlock(ctx, req.(*SetArchiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_GetArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArchiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).GetArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Database/GetArchive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).GetArchive(ctx, req.(*GetArchiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_SetArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetArchiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).SetArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Database/SetArchive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).SetArchive(ctx, req.(*SetArchiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_GetModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArchiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).GetModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Database/GetModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).GetModel(ctx, req.(*GetArchiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_SetModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetArchiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).SetModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Database/SetModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).SetModel(ctx, req.(*SetArchiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArchiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Database/GetMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).GetMetadata(ctx, req.(*GetArchiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_SetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetArchiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).SetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Database/SetMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).SetMetadata(ctx, req.(*SetArchiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Database_serviceDesc = grpc.ServiceDesc{
	ServiceName: "libra.v1.Database",
	HandlerType: (*DatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterSchema",
			Handler:    _Database_RegisterSchema_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _Database_Lock_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _Database_Unlock_Handler,
		},
		{
			MethodName: "GetArchive",
			Handler:    _Database_GetArchive_Handler,
		},
		{
			MethodName: "SetArchive",
			Handler:    _Database_SetArchive_Handler,
		},
		{
			MethodName: "GetModel",
			Handler:    _Database_GetModel_Handler,
		},
		{
			MethodName: "SetModel",
			Handler:    _Database_SetModel_Handler,
		},
		{
			MethodName: "GetMetadata",
			Handler:    _Database_GetMetadata_Handler,
		},
		{
			MethodName: "SetMetadata",
			Handler:    _Database_SetMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/database.proto",
}
