// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MailingClient is the client API for Mailing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailingClient interface {
	List(ctx context.Context, in *MailingListRequest, opts ...grpc.CallOption) (*MailingListResponse, error)
	Push(ctx context.Context, in *MailingPushRequest, opts ...grpc.CallOption) (*MailingPushResponse, error)
	Pull(ctx context.Context, in *MailingPullRequest, opts ...grpc.CallOption) (*MailingPullResponse, error)
}

type mailingClient struct {
	cc grpc.ClientConnInterface
}

func NewMailingClient(cc grpc.ClientConnInterface) MailingClient {
	return &mailingClient{cc}
}

func (c *mailingClient) List(ctx context.Context, in *MailingListRequest, opts ...grpc.CallOption) (*MailingListResponse, error) {
	out := new(MailingListResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Mailing/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingClient) Push(ctx context.Context, in *MailingPushRequest, opts ...grpc.CallOption) (*MailingPushResponse, error) {
	out := new(MailingPushResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Mailing/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingClient) Pull(ctx context.Context, in *MailingPullRequest, opts ...grpc.CallOption) (*MailingPullResponse, error) {
	out := new(MailingPullResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Mailing/Pull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailingServer is the server API for Mailing service.
// All implementations must embed UnimplementedMailingServer
// for forward compatibility
type MailingServer interface {
	List(context.Context, *MailingListRequest) (*MailingListResponse, error)
	Push(context.Context, *MailingPushRequest) (*MailingPushResponse, error)
	Pull(context.Context, *MailingPullRequest) (*MailingPullResponse, error)
	mustEmbedUnimplementedMailingServer()
}

// UnimplementedMailingServer must be embedded to have forward compatible implementations.
type UnimplementedMailingServer struct {
}

func (*UnimplementedMailingServer) List(context.Context, *MailingListRequest) (*MailingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedMailingServer) Push(context.Context, *MailingPushRequest) (*MailingPushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (*UnimplementedMailingServer) Pull(context.Context, *MailingPullRequest) (*MailingPullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (*UnimplementedMailingServer) mustEmbedUnimplementedMailingServer() {}

func RegisterMailingServer(s *grpc.Server, srv MailingServer) {
	s.RegisterService(&_Mailing_serviceDesc, srv)
}

func _Mailing_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MailingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Mailing/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingServer).List(ctx, req.(*MailingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mailing_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MailingPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Mailing/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingServer).Push(ctx, req.(*MailingPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mailing_Pull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MailingPullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingServer).Pull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Mailing/Pull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingServer).Pull(ctx, req.(*MailingPullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mailing_serviceDesc = grpc.ServiceDesc{
	ServiceName: "libra.v1.Mailing",
	HandlerType: (*MailingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Mailing_List_Handler,
		},
		{
			MethodName: "Push",
			Handler:    _Mailing_Push_Handler,
		},
		{
			MethodName: "Pull",
			Handler:    _Mailing_Pull_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/mailing.proto",
}
