// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BubbleClient is the client API for Bubble service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BubbleClient interface {
	// append entries to the end of chart
	Append(ctx context.Context, in *BubbleAppendRequest, opts ...grpc.CallOption) (*BubbleAppendResponse, error)
	// swap 2 entries by id
	SwapById(ctx context.Context, in *BubbleSwapByIdRequest, opts ...grpc.CallOption) (*BubbleSwapByIdResponse, error)
	// swap 2 entries by rank
	SwapByRank(ctx context.Context, in *BubbleSwapByRankRequest, opts ...grpc.CallOption) (*BubbleSwapByRankResponse, error)
	// get entries by range
	GetRange(ctx context.Context, in *BubbleGetRangeRequest, opts ...grpc.CallOption) (*BubbleGetRangeResponse, error)
	// get entries by id
	GetById(ctx context.Context, in *BubbleGetByIdRequest, opts ...grpc.CallOption) (*BubbleGetByIdResponse, error)
	// remove entries by id
	RemoveById(ctx context.Context, in *BubbleRemoveByIdRequest, opts ...grpc.CallOption) (*BubbleRemoveByIdResponse, error)
	// set entry info by id
	SetInfo(ctx context.Context, in *BubbleSetInfoRequest, opts ...grpc.CallOption) (*BubbleSetInfoResponse, error)
}

type bubbleClient struct {
	cc grpc.ClientConnInterface
}

func NewBubbleClient(cc grpc.ClientConnInterface) BubbleClient {
	return &bubbleClient{cc}
}

func (c *bubbleClient) Append(ctx context.Context, in *BubbleAppendRequest, opts ...grpc.CallOption) (*BubbleAppendResponse, error) {
	out := new(BubbleAppendResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Bubble/Append", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bubbleClient) SwapById(ctx context.Context, in *BubbleSwapByIdRequest, opts ...grpc.CallOption) (*BubbleSwapByIdResponse, error) {
	out := new(BubbleSwapByIdResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Bubble/SwapById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bubbleClient) SwapByRank(ctx context.Context, in *BubbleSwapByRankRequest, opts ...grpc.CallOption) (*BubbleSwapByRankResponse, error) {
	out := new(BubbleSwapByRankResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Bubble/SwapByRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bubbleClient) GetRange(ctx context.Context, in *BubbleGetRangeRequest, opts ...grpc.CallOption) (*BubbleGetRangeResponse, error) {
	out := new(BubbleGetRangeResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Bubble/GetRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bubbleClient) GetById(ctx context.Context, in *BubbleGetByIdRequest, opts ...grpc.CallOption) (*BubbleGetByIdResponse, error) {
	out := new(BubbleGetByIdResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Bubble/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bubbleClient) RemoveById(ctx context.Context, in *BubbleRemoveByIdRequest, opts ...grpc.CallOption) (*BubbleRemoveByIdResponse, error) {
	out := new(BubbleRemoveByIdResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Bubble/RemoveById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bubbleClient) SetInfo(ctx context.Context, in *BubbleSetInfoRequest, opts ...grpc.CallOption) (*BubbleSetInfoResponse, error) {
	out := new(BubbleSetInfoResponse)
	err := c.cc.Invoke(ctx, "/libra.v1.Bubble/SetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BubbleServer is the server API for Bubble service.
// All implementations must embed UnimplementedBubbleServer
// for forward compatibility
type BubbleServer interface {
	// append entries to the end of chart
	Append(context.Context, *BubbleAppendRequest) (*BubbleAppendResponse, error)
	// swap 2 entries by id
	SwapById(context.Context, *BubbleSwapByIdRequest) (*BubbleSwapByIdResponse, error)
	// swap 2 entries by rank
	SwapByRank(context.Context, *BubbleSwapByRankRequest) (*BubbleSwapByRankResponse, error)
	// get entries by range
	GetRange(context.Context, *BubbleGetRangeRequest) (*BubbleGetRangeResponse, error)
	// get entries by id
	GetById(context.Context, *BubbleGetByIdRequest) (*BubbleGetByIdResponse, error)
	// remove entries by id
	RemoveById(context.Context, *BubbleRemoveByIdRequest) (*BubbleRemoveByIdResponse, error)
	// set entry info by id
	SetInfo(context.Context, *BubbleSetInfoRequest) (*BubbleSetInfoResponse, error)
	mustEmbedUnimplementedBubbleServer()
}

// UnimplementedBubbleServer must be embedded to have forward compatible implementations.
type UnimplementedBubbleServer struct {
}

func (*UnimplementedBubbleServer) Append(context.Context, *BubbleAppendRequest) (*BubbleAppendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (*UnimplementedBubbleServer) SwapById(context.Context, *BubbleSwapByIdRequest) (*BubbleSwapByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapById not implemented")
}
func (*UnimplementedBubbleServer) SwapByRank(context.Context, *BubbleSwapByRankRequest) (*BubbleSwapByRankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapByRank not implemented")
}
func (*UnimplementedBubbleServer) GetRange(context.Context, *BubbleGetRangeRequest) (*BubbleGetRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRange not implemented")
}
func (*UnimplementedBubbleServer) GetById(context.Context, *BubbleGetByIdRequest) (*BubbleGetByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (*UnimplementedBubbleServer) RemoveById(context.Context, *BubbleRemoveByIdRequest) (*BubbleRemoveByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveById not implemented")
}
func (*UnimplementedBubbleServer) SetInfo(context.Context, *BubbleSetInfoRequest) (*BubbleSetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInfo not implemented")
}
func (*UnimplementedBubbleServer) mustEmbedUnimplementedBubbleServer() {}

func RegisterBubbleServer(s *grpc.Server, srv BubbleServer) {
	s.RegisterService(&_Bubble_serviceDesc, srv)
}

func _Bubble_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BubbleAppendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BubbleServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Bubble/Append",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BubbleServer).Append(ctx, req.(*BubbleAppendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bubble_SwapById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BubbleSwapByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BubbleServer).SwapById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Bubble/SwapById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BubbleServer).SwapById(ctx, req.(*BubbleSwapByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bubble_SwapByRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BubbleSwapByRankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BubbleServer).SwapByRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Bubble/SwapByRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BubbleServer).SwapByRank(ctx, req.(*BubbleSwapByRankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bubble_GetRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BubbleGetRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BubbleServer).GetRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Bubble/GetRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BubbleServer).GetRange(ctx, req.(*BubbleGetRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bubble_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BubbleGetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BubbleServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Bubble/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BubbleServer).GetById(ctx, req.(*BubbleGetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bubble_RemoveById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BubbleRemoveByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BubbleServer).RemoveById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Bubble/RemoveById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BubbleServer).RemoveById(ctx, req.(*BubbleRemoveByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bubble_SetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BubbleSetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BubbleServer).SetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libra.v1.Bubble/SetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BubbleServer).SetInfo(ctx, req.(*BubbleSetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bubble_serviceDesc = grpc.ServiceDesc{
	ServiceName: "libra.v1.Bubble",
	HandlerType: (*BubbleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Append",
			Handler:    _Bubble_Append_Handler,
		},
		{
			MethodName: "SwapById",
			Handler:    _Bubble_SwapById_Handler,
		},
		{
			MethodName: "SwapByRank",
			Handler:    _Bubble_SwapByRank_Handler,
		},
		{
			MethodName: "GetRange",
			Handler:    _Bubble_GetRange_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _Bubble_GetById_Handler,
		},
		{
			MethodName: "RemoveById",
			Handler:    _Bubble_RemoveById_Handler,
		},
		{
			MethodName: "SetInfo",
			Handler:    _Bubble_SetInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/bubble.proto",
}
